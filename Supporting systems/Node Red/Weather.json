[
    {
        "id": "9745955f4d16136d",
        "type": "tab",
        "label": "Weather",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8d4e92948e661563",
        "type": "mqtt in",
        "z": "9745955f4d16136d",
        "name": "Get data for all weather devices",
        "topic": "+/+/weather/+",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "4e9759aa5d998d78",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 100,
        "wires": [
            [
                "34e0ae6174fbd0ca"
            ]
        ]
    },
    {
        "id": "34e0ae6174fbd0ca",
        "type": "function",
        "z": "9745955f4d16136d",
        "name": "Setup for HTTP influb 2 write.",
        "func": "// === InfluxDB Auth Token ===\nconst token = \"CQcuM3A6AWK7p6z4wDl6eCkWPN-4QAeya-MVy7Yv7NEby2QVN0GMXJmyhnpFsS9h6YzOn0H9rW0yeXvVs9oxag==\";\n\n// === Parse MQTT Topic Structure ===\n// Expected format: [type_of_data]/[site_name]/[device_type]/[device_id]\n// Example: sensor/baanfarang/weather/main\nconst topicParts = msg.topic.split('/');\nconst type_of_data = topicParts[0] || 'unknown';\nconst site_name = topicParts[1] || 'unknown';\nconst device_type = topicParts[2] || 'unknown';\nconst device_id = topicParts[3] || 'main';\n\n// === Line Protocol Setup ===\nconst measurement = \"Readings\";\nconst tags = {\n    type_of_data: type_of_data,\n    site_name: site_name,\n    device_type: device_type,\n    device_id: device_id\n};\n\n// === Extract Data from JSON Payload ===\nconst payload = typeof msg.payload === 'string' ? JSON.parse(msg.payload) : msg.payload;\nconst fields = {};\n\n// Debug: Log the payload structure\nnode.log(`Received payload structure: ${JSON.stringify(payload, null, 2)}`);\n\n// Extract processor data\nif (payload.processor) {\n    const processor = payload.processor;\n    if (processor.WiFiRSSI !== undefined) fields.wifiRSSI = processor.WiFiRSSI;\n    if (processor.IPAddress) fields.ipAddress = `\"${processor.IPAddress}\"`;\n    if (processor.CPUTemperature !== undefined) fields.cpuTemperature = processor.CPUTemperature;\n    if (processor.SoftwareVersion) fields.softwareVersion = `\"${processor.SoftwareVersion}\"`;\n    if (processor.ChipID) fields.chipID = `\"${processor.ChipID}\"`;\n    if (processor.WDTRestartCount !== undefined) fields.wdtRestartCount = processor.WDTRestartCount;\n}\n\n// Extract sensor data\nif (payload.sensors) {\n    const sensors = payload.sensors;\n\n    // BH1750 Light Sensor\n    if (sensors.bh1750 && sensors.bh1750.valid) {\n        if (sensors.bh1750.lux !== undefined) fields.lux = sensors.bh1750.lux;\n    }\n\n    // BME680 Environmental Sensor\n    if (sensors.bme680 && sensors.bme680.valid) {\n        if (sensors.bme680.temperature !== undefined) fields.temperature = sensors.bme680.temperature;\n        if (sensors.bme680.humidity !== undefined) fields.humidity = sensors.bme680.humidity;\n        if (sensors.bme680.pressure !== undefined) fields.pressure = sensors.bme680.pressure;\n        if (sensors.bme680.gas_resistance !== undefined) fields.gas_resistance = sensors.bme680.gas_resistance;\n    }\n\n    // DHT22 Sensor (if present)\n    if (sensors.dht22 && sensors.dht22.valid) {\n        if (sensors.dht22.temperature !== undefined) fields.dht22_temperature = sensors.dht22.temperature;\n        if (sensors.dht22.humidity !== undefined) fields.dht22_humidity = sensors.dht22.humidity;\n    }\n\n    // DS18B20 Temperature Sensor (if present)\n    if (sensors.ds18b20 && sensors.ds18b20.valid) {\n        if (sensors.ds18b20.temperature !== undefined) fields.ds18b20_temperature = sensors.ds18b20.temperature;\n    }\n\n    // MQ135 Air Quality Sensor (if present)\n    if (sensors.mq135 && sensors.mq135.valid) {\n        if (sensors.mq135.ppm !== undefined) fields.air_quality_ppm = sensors.mq135.ppm;\n    }\n\n    // SN-3000-FSJT-N01 Wind Speed Sensor\n    if (sensors.wind_speed && sensors.wind_speed.valid) {\n        if (sensors.wind_speed.wind_speed !== undefined) fields.wind_speed_instantaneous = sensors.wind_speed.wind_speed;\n        if (sensors.wind_speed.wind_speed_avg !== undefined) fields.wind_speed_average = sensors.wind_speed.wind_speed_avg;\n        if (sensors.wind_speed.wind_gust !== undefined) fields.wind_gust = sensors.wind_speed.wind_gust;\n        if (sensors.wind_speed.raw_reading !== undefined) fields.wind_raw_reading = sensors.wind_speed.raw_reading;\n    }\n}\n\n// === Convert to Line Protocol ===\nconst tagString = Object.entries(tags)\n    .map(([k, v]) => `${k}=${v}`)\n    .join(',');\n\nconst fieldString = Object.entries(fields)\n    .filter(([_, v]) => v !== undefined && v !== null)\n    .map(([k, v]) => {\n        if (typeof v === \"string\") return `${k}=${v}`;\n        return `${k}=${v}`;\n    })\n    .join(',');\n\n// Only proceed if we have fields to write\nif (fieldString.length === 0) {\n    node.warn(`No valid fields found for topic: ${msg.topic}`);\n    return null;\n}\n\nconst timestamp = Date.now() * 1_000_000; // nanoseconds\nmsg.payload = `${measurement},${tagString} ${fieldString} ${timestamp}`;\n\n// === HTTP Request Setup ===\nmsg.headers = {\n    \"Authorization\": \"Token \" + token,\n    \"Content-Type\": \"text/plain\"\n};\nmsg.method = \"POST\";\nmsg.url = \"http://influxdb2:8086/api/v2/write?org=solarblue&bucket=Weather&precision=ns\";\n\n// Debug output\nnode.log(`Topic: ${msg.topic} -> Site: ${site_name}, Device Type: ${device_type}, Device: ${device_id}`);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 220,
        "wires": [
            [
                "b14387734726e241"
            ]
        ]
    },
    {
        "id": "b14387734726e241",
        "type": "http request",
        "z": "9745955f4d16136d",
        "name": "Write to INFLUX 2",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "4e9759aa5d998d78",
        "type": "mqtt-broker",
        "name": "MQTT on RaspberryJack",
        "broker": "mqtt://mosquitto:1883",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]